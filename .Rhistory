install.packages("ASReml")
install.packages("MCMCglmm")
library(MCMCglmm)
library(tidyr)
library(dplyr)
library(ggplot2)
install.packages("VSNi")
install.packages("asreml")
library(lme4)
library(MCMCglmm)
library(tidyverse)
library(broom)
library(nadiv)
install.packages("tidyverse")
install.packages("nadiv")
library(lme4)
library(MCMCglmm)
library(tidyverse)
library(broom)
library(nadiv)
df_syndrome <- read_csv("syndrome.csv")
df_syndrome <- read_csv("syndrome.csv")
df_syndrome <- read_csv("syndrome.csv")
df_syndrome <- read_csv("syndrome.csv")
df_syndrome <- read_csv("syndrome.csv")
View(df_syndrome)
head(df_syndrome)
?scale
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) +
scale(body_size) +
(1|ID),
data = df_syndrome)
lmer_b <- lmer(df_syndrome$boldness - scale(assay_rep, scale=FALSE) +
scale(body_size) +
(1|ID),
data = df_syndrome)
View(df_syndrome)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
lmer_b <- lmer(df_syndrome$boldness - scale(df_syndrome$assay_rep, scale=FALSE) + scale(df_syndrome$body_size) + (1|ID), data = df_syndrome)
lmer_b <- lmer(df_syndrome$boldness - scale(df_syndrome$assay_rep, scale=FALSE) + scale(df_syndrome$body_size) + (1|df_syndrome$ID), data = df_syndrome)
library(lme4)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
class(df_syndrome$boldness)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
lmer_b <- lmer(boldness - scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = "df_syndrome")
lmer_b <- lmer(boldness ~ scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
plot(lmer_b)
qqnorm(residuals(lmer_b))
hist(residuals(lmer_b))
summary(lmer_b)
##compute repeatability (personality) by dividing the variance in the trait due to difference among individuals (Vid) by the total phenotypic variance adter account for the fixed effects (Vid + Vresiduals)
#use broom to do this automatically
rep_bold <- tidy(lmer_b, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatability = ID/(ID + Residual))
rep_bold
#do the same for exploration
lmer_e <- lmer(exploration ~ scale(assay_rep, scale = FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
#calculate repeatability
rep_expl <- tidy(lmer_e, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatbility = ID/(ID+Residual))
rep_expl
#create two data frames of individual predictions extracted from model fits (for boldness and exploration) then join them
df_BLUPS_B <- data_frame(ID = row.names(ranef(lmer_b)$ID),
BLUP_B = ranef(lmer_b)$ID[,"(Intercept)"])
df_BLUPS_E <- data_frame(ID = row.names(ranef(lmer_e)$ID),
BLUP_E = ranef(lmer_e)$ID[,"(Intercept)"])
df_BLUPS_EB <- left_join(df_BLUPS_E, df_BLUPS_B,
by = "ID")
#plot to see what our expectations of correlations might be
plot(df_BLUPS_EB)
#plot to see what our expectations of correlations might be
plot(df_BLUPS_EB)
#plot
plot(df_BLUPS_EB$BLUP_B ~ df_BLUPS_EB$BLUP_E)
#plot
plot(df_BLUPS_EB$BLUP_B ~ df_BLUPS_EB$BLUP_E)
#plot
plot(df_BLUPS_EB$BLUP_B ~ df_BLUPS_EB$BLUP_E, abline = 1)
#perform a correlation test of these traits
cor.test(df_BLUPS_EB$BLUP_E, df_BLUPS_EB$BLUP_B)
?list
#now write model with scaled response variables (centered around mean and standardized to units of 1 phenotypic standard deviation)
#bind response variables together using cbind
mcmc_E_B_us <- MCMCglmm(gbind(scale(exploration), scale(boldness)) ~ trait-1 + trait:scale(assay_rep, scale = FALSE) + trait:scale(body_size), random =~ us(trait):ID, rcov =~ us(trait):units, family = c("gaussian", "gaussian"), prior = prior_E_B_1px, nitt = 420000, burnin = 20000, thin = 100, verbose = TRUE, data = as.data.frame(df_syndrome))
#first let's create a prior. here we use a paramter-expanded prior that should be uninformative for our model
prior_E_B_1px = list(R = list(V = diag(2), nu = 0.002), G = list(G1 = list(V = diag(2), nu = 2, alpha.mu = rep(0,2),alpha.V = diag(25^2,2,2))))
#now write model with scaled response variables (centered around mean and standardized to units of 1 phenotypic standard deviation)
#bind response variables together using cbind
mcmc_E_B_us <- MCMCglmm(gbind(scale(exploration), scale(boldness)) ~ trait-1 + trait:scale(assay_rep, scale = FALSE) + trait:scale(body_size),
random =~ us(trait):ID,
rcov =~ us(trait):units,
family = c("gaussian", "gaussian"),
prior = prior_E_B_1px,
nitt = 420000,
burnin = 20000,
thin = 100,
verbose = TRUE,
data = as.data.frame(df_syndrome))
#now write model with scaled response variables (centered around mean and standardized to units of 1 phenotypic standard deviation)
#bind response variables together using cbind
mcmc_E_B_us <- MCMCglmm(cbind(scale(exploration), scale(boldness)) ~ trait-1 + trait:scale(assay_rep, scale = FALSE) + trait:scale(body_size),
random =~ us(trait):ID,
rcov =~ us(trait):units,
family = c("gaussian", "gaussian"),
prior = prior_E_B_1px,
nitt = 420000,
burnin = 20000,
thin = 100,
verbose = TRUE,
data = as.data.frame(df_syndrome))
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
summary(mcmc_E_B_us)
getwd()
setwd("/Users/emilyzepeda/Desktop/coyote habitat choice/Coyote Habitat Choice")
load(file = "./utm_pups.rdata")
write_csv(utm_pups, file = "utm_pups.csv")
write.csv(utm_pups, file = "utm_pups.csv")
load("./utm_parents.rdata")
View(utm_parents)
utm_parents <- as.data.frame(utm_parents)
View(utm_parents)
View(utm_parents)
length(unique(utm_parents$parent_year_id))
length(unique(utm_pups$coyote_id))
library(lme4)
library(MCMCglmm)
library(tidyverse)
library(broom)
library(nadiv)
df_syndrome <- read_csv("syndrome.csv")
###First let's see how a univariate model works
lmer_b <- lmer(boldness ~ scale(assay_rep, scale=FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
plot(lmer_b)
qqnorm(residuals(lmer_b)) #what does this tell us?
hist(residuals(lmer_b))
summary(lmer_b) #we're interested in the random effects section of the summary specifically the variance component
.69/(.69 + 1.16)
#use broom to do this automatically
rep_bold <- tidy(lmer_b, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatability = ID/(ID + Residual))
rep_bold
##do the same for exploration
lmer_e <- lmer(exploration ~ scale(assay_rep, scale = FALSE) + scale(body_size) + (1|ID), data = df_syndrome)
#calculate repeatability
rep_expl <- tidy(lmer_e, effects = "ran_pars", scales = "vcov") %>%
select(group, estimate) %>%
spread(group, estimate) %>%
mutate(repeatbility = ID/(ID+Residual))
rep_expl
#create two data frames of individual predictions extracted from model fits (for boldness and exploration) then join them
df_BLUPS_B <- data_frame(ID = row.names(ranef(lmer_b)$ID),
BLUP_B = ranef(lmer_b)$ID[,"(Intercept)"])
#create two data frames of individual predictions extracted from model fits (for boldness and exploration) then join them
df_BLUPS_B <- tibble(ID = row.names(ranef(lmer_b)$ID),
BLUP_B = ranef(lmer_b)$ID[,"(Intercept)"])
df_BLUPS_E <- tibble(ID = row.names(ranef(lmer_e)$ID),
BLUP_E = ranef(lmer_e)$ID[,"(Intercept)"])
df_BLUPS_EB <- left_join(df_BLUPS_E, df_BLUPS_B,
by = "ID")
View(df_BLUPS_EB)
#plot
plot(df_BLUPS_EB$BLUP_B ~ df_BLUPS_EB$BLUP_E)
#perform a correlation test of these traits
cor.test(df_BLUPS_EB$BLUP_E, df_BLUPS_EB$BLUP_B)
##Using BLUPs this way leads to anticonservative significance tests because the rror inherent in their prediction is not carried forward from the lmer models to the subsequent analysis
View(mcmc_E_B_us)
View(df_syndrome)
#first assign an uninformative prior; later you should check that your model results
prior_E_B_1px = list(R = list(V = diag(2), nu = 0.002),
G = list(G1 = list(V = diag(2), nu = 2, alpha.mu = rep(0,2),
alpha.V = diag(25^2,2,2))))
mcmc_E_B_us <- MCMCglmm(cbind(scale(exploration), scale(boldness)) ~ trait-1 + trait:scale(assay_rep, scale = FALSE) +
trait:scale(body_size),
random =~ us(trait):ID,
rcov =~ us(trait):units,
family = c("gaussian","gaussian"), prior = prior_E_B_1px, nitt=420000,
burnin=20000,
thin=100,
verbose = TRUE,
data = as.data.frame(df_syndrome))
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
plot(mcmc_E_B_us$VCV)
read.csv("striders_2013.csv")
data <- read.csv("striders_2013.csv")
data <- read.csv("striders_2013.csv")
library(dplyr)
#change mating column to 0 and 1
data$mating <- ifelse(data$mating == "N", 0, 1)
View(data)
prop_data$id <- unique(data$id)
#create a vector of strider ids
ids <- unique(data$id)
#create vector of trial numbers
trials <- data %>% group_by(date) %>% print9 %>% ungroup()
#create vector of trial numbers
trials <- data %>% group_by(date) %>% print() %>% ungroup()
View(trials)
View(trials)
#create vector of trial numbers
trials <- data %>% group_by(date) %>% ungroup() %>% print()
#create vector of trial numbers
trials <- data %>% summarize(group_by(date)) %>% ungroup()
test <- data %>% group_by(id) %>%
summarize(n = length(id)) %>% ungroup()
View(test)
test <- data %>% group_by(date) %>%
summarize(n = length(date)) %>% ungroup()
View(test)
data$trial <- paste(data$date, data$tank)
unique(data$trial)
data <- read.csv("data.csv")
#change mating column to 0 and 1
data$mating_edit <- ifelse(data$mating == "N" | data$mating == "NA" |data$mating == "ES" |data$mating =="O" |data$mating =="OVI" |data$mating =="V" |data$mating =="DEAD" |data$mating =="C" |data$mating =="dead?" |data$mating == "?", 0, 1)
#change activity column to 0 and 1
data$activity <- ifelse(data$behavior == "W" | data$behavior == "WF" | data$behavior == "WC"| data$behavior == "WES", 1, 0)
head(data)
#change mating column to 0 and 1
data$mating_edit <- ifelse(data$mating == "N" | data$mating == "NA" |data$mating == "ES" |data$mating =="O" |data$mating =="OVI" |data$mating =="V" |data$mating =="DEAD" |data$mating =="C" |data$mating =="dead?" |data$mating == "?", 0, 1)
#change mating column to 0 and 1
data$mating <- ifelse(data$mating == "N" | data$mating == "NA" |data$mating == "ES" |data$mating =="O" |data$mating =="OVI" |data$mating =="V" |data$mating =="DEAD" |data$mating =="C" |data$mating =="dead?" |data$mating == "?", 0, 1)
head(data)
#subset data to include only relevant columns
data <- subset(data, select = c(date, tank, id, sex, time, activity, mating, Treatment))
head(data)
data$date <- as.Date(data$date)
test <- data %>% group_by(date) %>% group_by(tank) %>% summarize(unique(id)) %>% ungroup
library(dplyr)
test <- data %>% group_by(date) %>% group_by(tank) %>% summarize(unique(id)) %>% ungroup
test <- data %>% group_by(date) %>% group_by(tank) %>% print(unique(id)) %>% ungroup
View(test)
test <- data %>% group_by(date) %>% group_by(tank) %>% print(unique(id))
View(test)
test <- data %>% group_by(date)
View(test)
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- data %>% group_by(date) %>% print(min(date)) %>% ungroup()
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- data %>% group_by(date) %>% print(n = length(date)) %>% ungroup()
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- bloop
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- "bloop"
?print
?summarize
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- data %>% group_by(date) %>% group_by(tank) %>%
dates <- unique(data$date)
###Group activity and mating data by id so we have proportion of time mating and active for each individual in each trial
test <- data %>% group_by(date) %>% group_by(tank) %>%
dates <- unique(data$date)
dates <- unique(data222222$date)
dates <- unique(data$date)
length(dates)
split(data, data$date)
data <- read.csv("data.csv")
#change mating column to 0 and 1
data$mating <- ifelse(data$mating == "N" | data$mating == "NA" |data$mating == "ES" |data$mating =="O" |data$mating =="OVI" |data$mating =="V" |data$mating =="DEAD" |data$mating =="C" |data$mating =="dead?" |data$mating == "?", 0, 1)
#change activity column to 0 and 1
data$activity <- ifelse(data$behavior == "W" | data$behavior == "WF" | data$behavior == "WC"| data$behavior == "WES", 1, 0)
#subset data to include only relevant columns
data <- subset(data, select = c(date, tank, id, sex, time, activity, mating, Treatment))
split(data, data$date)
newDat <- split(data, data$date)
View(newDat)
View(newDat)
newDat <- with(data, split(data, list(date, tank, Treatment), drop = TRUE))
View(newDat)
newDat <- with(data, split(data, list(date, tank, Treatment), drop = FALSE))
View(newDat)
newDat <- with(data, split(data, list(date, tank, Treatment), drop = TRUE))
newDat[[1]]
newDat[[2]]
newDat[[3]]
newDat[[4]]
length(newDat)
View(newDat)
View(newDat)
newDat[[4]]
View(newDat)
View(newDat[["20130507.T5."]])
newDat[1,]
newDat[[1,]
newDat[[1,]]
newDat[[1]]
newDat[1]
z = 4
newDat[[z]]$
newDat[z]$
newDat[1]
View(newDat)
newDat[["20130507.T5."]]
newDat[["z"]]
newDat$z
View(newDat)
View(data)
ids <- pply(newDat, `[`, c('date', 'tank', 'sex', 'id', 'Treatment'))
ids <- lapply(newDat, `[`, c('date', 'tank', 'sex', 'id', 'Treatment'))
View(ids)
id2 <- rbind_list(ids)
View(id2)
